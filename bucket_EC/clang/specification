DEF[LLVM_VERSION]=	EXTRACT_INFO(LLVM_VERSION)
DEF[PORTREVISION]=	0
DEF[MAJORMIN]=		${LLVM_VERSION:R}
DEF[MAJOR]=		${LLVM_VERSION:R:R}
DEF[TOOLCHAIN_GCC]=	EXTRACT_INFO(CURRENT_GCC)
DEF[GCC_VERSION]=	EXTRACT_INFO(CURRENT_GCC_VERSION)
DEF[GCC_LIB]=		toolchain/${TOOLCHAIN_GCC}/{{ASLIB}}
DEF[GXX_INCLUDE]=	toolchain/${TOOLCHAIN_GCC}/include/c++/${GCC_VERSION}
DEF[GCC_TARGET_LIB]=	${GCC_LIB}/gcc/{{CONFIGURE_TARGET}}/${GCC_VERSION}
# ----------------------------------------------------------------------------

NAMEBASE=		clang
VERSION=		${LLVM_VERSION}
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	C language family frontend for LLVM ${MAJORMIN}
HOMEPAGE=		http://llvm.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}/
			http://llvm.org/releases/${LLVM_VERSION}/
DISTFILE[1]=		clang-${LLVM_VERSION}.src.tar.xz:main
DISTFILE[2]=		clang-tools-extra-${LLVM_VERSION}.src.tar.xz:main
DF_INDEX=		1 2

SPKGS[standard]=	complete compiler extra

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

LICENSE=		CUSTOM1:compiler
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

BROKEN[sunos]=		stock sun linker runs out of memory (2G limit?)

BUILDRUN_DEPENDS=	llvm:single:standard

USES=			cmake ninja ncurses zlib execinfo
			shebangfix python:build
			c++:compiler,extra

GNOME_COMPONENTS=	libxml2
CMAKE_BUILD_TYPE=	Release
DISTNAME=		clang-${LLVM_VERSION}.src
SHEBANG_FILES=		utils/hmaptool/hmaptool
			tools/scan-view/bin/scan-view
			tools/clang-format/git-clang-format
			tools/clang-format/clang-format-diff.py
			tools/extra/clang-tidy/tool/clang-tidy-diff.py
			tools/extra/clang-tidy/tool/run-clang-tidy.py
			tools/extra/clang-include-fixer/find-all-symbols/tool/run-find-all-symbols.py
CFLAGS=			-O2 -pipe -DNDEBUG
CXXFLAGS=		-O2 -pipe -DNDEBUG
CMAKE_ARGS=		-DCMAKE_INSTALL_RPATH:STRING="{{LOCALBASE}}/llvm/lib"
			-DLLVM_BUILD_LLVM_DYLIB=ON
			-DLLVM_LINK_LLVM_DYLIB=ON
			-DLLVM_PARALLEL_LINK_JOBS=1
			-DLLVM_PARALLEL_COMPILE_JOBS={{MAKE_JOBS_NUMBER}}
			-DLLVM_INCLUDE_TESTS:BOOL=OFF
			-DLLVM_BUILD_32_BITS:BOOL=OFF
			-DLLVM_ENABLE_RTTI=ON
			-DGCC_INSTALL_PREFIX={{LOCALBASE}}/toolchain/${TOOLCHAIN_GCC}
PLIST_SUB=		LLVM_RELEASE="${LLVM_VERSION}"
			LLVM_MAJOR="${MAJOR}"

VAR_OPSYS[dragonfly]=	CMAKE_ARGS=-DLLVM_USE_LINKER=gold
VAR_OPSYS[freebsd]=	CMAKE_ARGS=-DLLVM_USE_LINKER=gold
VAR_OPSYS[linux]=	CMAKE_ARGS=-DLLVM_USE_LINKER=gold

post-extract:
	${MV} ${WRKDIR}/clang-tools-extra-${LLVM_VERSION}.src \
		${WRKSRC}/tools/extra

post-patch:
	${REINPLACE_CMD} -e 's,/usr/local/,${LOCALBASE}/,' \
		${WRKSRC}/lib/Driver/ToolChains/CommonArgs.cpp
	${REINPLACE_CMD} \
		-e 's|@LOCALBASE@|${LOCALBASE}|' \
		-e 's|@RAVEN_GCC@|${LOCALBASE}/${GCC_LIB}|' \
		-e 's|@RAVEN_GCC_TARGET@|${LOCALBASE}/${GCC_TARGET_LIB}|' \
		-e 's|@RAVEN_GXX_HEADERS_DIR@|${LOCALBASE}/${GXX_INCLUDE}|' \
		${WRKSRC}/lib/Driver/ToolChains/DragonFly.cpp \
		${WRKSRC}/lib/Driver/ToolChains/FreeBSD.cpp \
		${WRKSRC}/lib/Driver/ToolChains/Gnu.cpp \
		${WRKSRC}/lib/Frontend/InitHeaderSearch.cpp

post-install:
	${INSTALL_PROGRAM} ${WRKDIR}/.build/bin/clang-tblgen \
		${STAGEDIR}${PREFIX}/bin/
.for F in c-index-test clang-${MAJOR} clang-check clang-format \
	clang-extdef-mapping clang-import-test clang-offload-bundler \
	clang-move clang-offload-wrapper clang-refactor clang-rename clang-apply-replacements \
	clang-scan-deps clang-change-namespace clang-include-fixer clang-query \
	clang-reorder-fields clang-tidy clangd find-all-symbols \
	modularize diagtool pp-trace
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/${F}
.endfor
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libclang.${LIBEXT}
