--- meson.build.orig	2025-08-26 18:32:38 UTC
+++ meson.build
@@ -49,8 +49,8 @@ qemu_icondir = get_option('datadir') / '
 genh = []
 qapi_trace_events = []
 
-bsd_oses = ['gnu/kfreebsd', 'freebsd', 'netbsd', 'openbsd', 'dragonfly', 'darwin']
-supported_oses = ['windows', 'freebsd', 'netbsd', 'openbsd', 'darwin', 'sunos', 'linux', 'emscripten']
+bsd_oses = ['midnightbsd', 'freebsd', 'netbsd', 'openbsd', 'dragonfly', 'darwin']
+supported_oses = ['windows', 'freebsd', 'netbsd', 'openbsd', 'darwin', 'sunos', 'linux', 'emscripten', 'dragonfly', 'midnightbsd']
 supported_cpus = ['ppc', 'ppc64', 's390x', 'riscv32', 'riscv64', 'x86', 'x86_64',
   'arm', 'aarch64', 'loongarch64', 'mips', 'mips64', 'sparc64', 'wasm32']
 
@@ -255,7 +255,7 @@ have_tools = get_option('tools') \
   .allowed()
 have_ga = get_option('guest_agent') \
   .disable_auto_if(not have_system and not have_tools) \
-  .require(host_os in ['sunos', 'linux', 'windows', 'freebsd', 'netbsd', 'openbsd'],
+  .require(host_os in ['sunos', 'linux', 'windows', 'freebsd', 'netbsd', 'openbsd', 'dragonfly'],
            error_message: 'unsupported OS for QEMU guest agent') \
   .allowed()
 have_block = have_system or have_tools
@@ -903,7 +903,7 @@ if get_option('hvf').allowed()
 endif
 
 nvmm = not_found
-if host_os == 'netbsd'
+if host_os in ['netbsd', 'dragonfly']
   nvmm = cc.find_library('nvmm', required: get_option('nvmm'))
   if nvmm.found()
     accelerators += 'CONFIG_NVMM'
@@ -1508,7 +1508,7 @@ if have_system and get_option('curses').
       return 0;
     }'''
 
-  curses_dep_list = host_os == 'windows' ? ['ncurses', 'ncursesw'] : ['ncursesw']
+  curses_dep_list = host_os == 'windows' ? ['ncurses', 'ncursesw'] : ['ncurses']
   curses = dependency(curses_dep_list,
                       required: false,
                       method: 'pkg-config')
@@ -1531,14 +1531,15 @@ if have_system and get_option('curses').
       has_curses_h = cc.has_header('curses.h', args: curses_compile_args)
     endif
     if has_curses_h
-      curses_libname_list = (host_os == 'windows' ? ['pdcurses'] : ['ncursesw', 'cursesw'])
+      libtinfo = cc.find_library('tinfo', required: false, static: enable_static)
+      curses_libname_list = (host_os == 'windows' ? ['pdcurses'] : ['ncurses'])
       foreach curses_libname : curses_libname_list
         libcurses = cc.find_library(curses_libname,
                                     required: false)
         if libcurses.found()
-          if cc.links(curses_test, args: curses_compile_args, dependencies: libcurses)
+          if cc.links(curses_test, args: curses_compile_args, dependencies: [libcurses, libtinfo])
             curses = declare_dependency(compile_args: curses_compile_args,
-                                        dependencies: [libcurses])
+                                        dependencies: [libcurses, libtinfo])
             break
           else
             msg = 'curses library not usable'
