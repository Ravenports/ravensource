DEF[PORTVERSION]=	1.67.0
DEF[RUSTX_BOOT]=	1.66.1
DEF[CURL_VERSION]=	7.87.0
# ----------------------------------------------------------------------------

NAMEBASE=		rust
VERSION=		${PORTVERSION}
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	Systems programming language from Mozilla
HOMEPAGE=		https://www.rust-lang.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main dflyboot curl
SITES[main]=		https://static.rust-lang.org/dist/
SITES[dflyboot]=	https://leaf.dragonflybsd.org/~marino/dports-src/rust/
SITES[curl]=		http://curl.haxx.se/download/
DISTFILE[1]=		rustc-${PORTVERSION}-src.tar.xz:main

DISTFILE[2]=		rustc-${RUSTX_BOOT}-x86_64-unknown-dragonfly.tar.zst:dflyboot
DISTFILE[3]=		rust-std-${RUSTX_BOOT}-x86_64-unknown-dragonfly.tar.zst:dflyboot
DISTFILE[4]=		cargo-${RUSTX_BOOT}-x86_64-unknown-dragonfly.tar.zst:dflyboot

DISTFILE[5]=		rustc-${RUSTX_BOOT}-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[6]=		rust-std-${RUSTX_BOOT}-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[7]=		cargo-${RUSTX_BOOT}-x86_64-unknown-freebsd.tar.gz:main

DISTFILE[8]=		rustc-${RUSTX_BOOT}-x86_64-unknown-linux-gnu.tar.gz:main
DISTFILE[9]=		rust-std-${RUSTX_BOOT}-x86_64-unknown-linux-gnu.tar.gz:main
DISTFILE[10]=		cargo-${RUSTX_BOOT}-x86_64-unknown-linux-gnu.tar.gz:main

DISTFILE[11]=		rustc-${RUSTX_BOOT}-x86_64-unknown-netbsd.tar.gz:main
DISTFILE[12]=		rust-std-${RUSTX_BOOT}-x86_64-unknown-netbsd.tar.gz:main
DISTFILE[13]=		cargo-${RUSTX_BOOT}-x86_64-unknown-netbsd.tar.gz:main
DISTFILE[14]=		curl-${CURL_VERSION}.tar.xz:curl
DF_INDEX=		1 14

SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

LICENSE=		APACHE20:single MIT:single
LICENSE_FILE=		APACHE20:{{WRKSRC}}/LICENSE-APACHE
			MIT:{{WRKSRC}}/LICENSE-MIT
LICENSE_TERMS=		single:{{WRKSRC}}/COPYRIGHT
LICENSE_SCHEME=		dual

FPC_EQUIVALENT=		lang/rust
ONLY_FOR_OPSYS=		dragonfly freebsd linux netbsd

EXTRACT_ONLY=		1 14

# Use bundled libgit2 to avoid API mismatch which results in failure
# to fetch from crates IO
#
# Don't add caroot to RUN depends to avoid an update to NSS causing
# rust to rebuild

BUILD_DEPENDS=		bash:primary:standard
			cmake:primary:standard
			ncurses:primary:standard
			nss:caroot:standard

# required for rust linking (also pulls in c++ and gcc-libs so
# USES=c++:single is redundant
EXRUN[single]=		ravensys-gcc:compilers:standard

USES=			cpe gmake zlib:build python:build shebangfix
			execinfo c++:single dos2unix ssl:build
CPE_VENDOR=		rust-lang
MUST_CONFIGURE=		yes
CONFIGURE_ARGS=		--release-channel=stable
			--enable-rpath
			--enable-extended
			--enable-vendor
			--enable-locked-deps
			--local-rust-root={{WRKDIR}}/bootstrap
			--prefix={{PREFIX}}
			--disable-ninja
			--default-linker={{LOCALBASE}}/toolchain/ravensys-gcc/bin/cc
DISTNAME=		rustc-${PORTVERSION}-src
MAKE_ENV=		LD_LIBRARY_PATH={{WRKDIR}}/bootstrap/lib
# #			LIBGIT2_SYS_USE_PKG_CONFIG=1
			LIBSSH2_SYS_USE_PKG_CONFIG=1
			OPENSSL_NO_PKG_CONFIG=1
			RUST_BACKTRACE=1
			PROFILE=release
			OPENSSL_DIR="{{OPENSSLBASE}}"
			HOME="{{WRKDIR}}"
INSTALL_REQ_TOOLCHAIN=	yes
SHEBANG_FILES=		src/llvm-project/compiler-rt/lib/sanitizer_common/symbolizer/scripts/*.sh
			src/llvm-project/compiler-rt/lib/asan/scripts/asan_device_setup
			src/llvm-project/compiler-rt/lib/tsan/*.sh
			src/llvm-project/compiler-rt/lib/fuzzer/scripts/*.py
			src/llvm-project/compiler-rt/lib/dfsan/scripts/build-libc-list.py
			src/llvm-project/compiler-rt/lib/sanitizer_common/scripts/*.py
			src/llvm-project/compiler-rt/lib/asan/scripts/asan_symbolize.py
			library/core/src/unicode/printable.py
			library/backtrace/ci/debuglink.sh
DOS2UNIX_FILES=		vendor/openssl-probe/src/lib.rs

VAR_OPSYS[dragonfly]=	MAKEFILE_LINE=BOOTSTRAP_RUST=${RUSTX_BOOT}
			MAKEFILE_LINE=BOOTSTRAP_CARGO=${RUSTX_BOOT}
VAR_OPSYS[freebsd]=	MAKEFILE_LINE=BOOTSTRAP_RUST=${RUSTX_BOOT}
			MAKEFILE_LINE=BOOTSTRAP_CARGO=${RUSTX_BOOT}
VAR_OPSYS[netbsd]=	MAKEFILE_LINE=BOOTSTRAP_RUST=${RUSTX_BOOT}
			MAKEFILE_LINE=BOOTSTRAP_CARGO=${RUSTX_BOOT}
VAR_OPSYS[linux]=	MAKEFILE_LINE=BOOTSTRAP_RUST=${RUSTX_BOOT}
			MAKEFILE_LINE=BOOTSTRAP_CARGO=${RUSTX_BOOT}

pre-configure:
	# Use rpath suitable for libz et al.
	${REINPLACE_CMD} -e 's|@PREFIX@|${PREFIX}|g' \
		-e 's|@OPENSSLLIB@|${OPENSSLLIB}|g' \
		${WRKSRC}/src/bootstrap/builder.rs
	# Disable vendor checksums
	${REINPLACE_CMD} -e 's/"files":{[^}]*}/"files":{}/' \
		 ${WRKSRC}/vendor/*/.cargo-checksum.json
	# Enable rust to find certificates
	${REINPLACE_CMD} -e 's|@PREFIX@|${PREFIX}|' \
		${WRKSRC}/vendor/openssl-probe/src/lib.rs

	# remove link to shared libressl, execinfo and zlib
	# replace static versions with PIC versions
	(cd ${LOCALBASE}/libressl/lib \
		&& ${CP} libssl_pic.a libssl.a \
		&& ${CP} libcrypto_pic.a libcrypto.a \
		&& ${CP} libtls_pic.a libtls.a \
		&& ${RM} lib*.so)
	(cd ${LOCALBASE}/lib \
		&& ${CP} libexecinfo_pic.a libexecinfo.a \
		&& ${CP} libz_pic.a libz.a \
		&& ${RM} libexecinfo.so \
		&& ${RM} libz.so)

	# build curl here.
	${SH} ${FILESDIR}/build_curl.sh "${PREFIX}" "${CONFIGURE_TARGET}"
	(cd ${WRKDIR}/curl-* && ${MAKE_CMD})
	${INSTALL_DATA} ${WRKDIR}/curl-${CURL_VERSION}/lib/.libs/libcurl.a \
		${LOCALBASE}/lib/

pre-build:
	${MKDIR} ${WRKDIR}/bootstrap
	# Extract OS-specific bootstrap components
	# then install bootstrap components

	for F in ${SRC_RUSTC} ${SRC_RUSTSTD} ${SRC_CARGO}; do\
	   ${TAR} -C ${WRKDIR} -xf ${DISTDIR}/$$F.tar.${COMPEXT}\
	     --no-same-owner --no-same-permissions;\
	   ${LOCALBASE}/bin/bash ${WRKDIR}/$$F/install.sh\
	     --prefix=${WRKDIR}/bootstrap;\
	done

pre-build-dragonfly:
	${LN} -s ${LOCALBASE}/toolchain/ravensys-gcc/lib/libgcc_s.so \
	${WRKDIR}/bootstrap/lib/rustlib/${SFX}/lib/libgcc_pic.so

pre-build-freebsd:
	${LN} -s ${LOCALBASE}/toolchain/ravensys-gcc/lib/libstdc++.so \
	${LOCALBASE}/lib/libc++.so

pre-build-netbsd:
	${LN} -s ${LOCALBASE}/toolchain/ravensys-gcc/lib/libgcc_s.so.1 \
	${WRKDIR}/bootstrap/lib/libgcc_s.so.1

pre-build-linux:
	${LN} -s ${LOCALBASE}/lib/libz.so.1 ${WRKDIR}/bootstrap/lib

post-build-freebsd:
	${RM} ${LOCALBASE}/lib/libc++.so

do-build:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} \
		${PYTHON_CMD} x.py build --verbose --config ./config.toml \
		--jobs ${MAKE_JOBS_NUMBER})

do-install:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} DESTDIR=${STAGEDIR} \
		${PYTHON_CMD} x.py install --verbose --config ./config.toml \
		--jobs ${MAKE_JOBS_NUMBER})

post-install:
	${RM} ${STAGEDIR}${PREFIX}/lib/rustlib/install.log
	${RM} ${STAGEDIR}${PREFIX}/lib/rustlib/uninstall.sh
	${RM} -r ${STAGEDIR}${PREFIX}/share/doc/rust

	# Taken from FreeBSD Ports
	# In post-install, we use the manifests generated during Rust install
	# to in turn generate the PLIST. We do that because several libraries
	# have a computed filename based on the absolute path of the source
	# files. As it is user-specific, we can't know the filename in advance.
	#
	# Both rustc and Cargo components install the same README.md and
	# LICENSE files. The install process backs up the first copy to
	# install the second. Thus here, we need to remove those backups.
	# Actually we remove the entire share/doc/rust contents.
	# We also need to dedup the entries in the generated PLIST, because
	# both components manifests list them.
	#
	# We fix manpage entries in the generated manifests because Rust
	# installs them uncompressed but the Ports framework compresses them.
	for f in ${STAGEDIR}${PREFIX}/lib/rustlib/manifest-*; do \
	    ${SED} -i'' -E \
		-e '/share\/doc\/rust/d' \
	        -e 's|:${STAGEDIR}|:|' \
	        -e 's|(man/man[1-9]/.*\.[0-9])|\1.gz|' \
	        $$f; \
	    ${AWK} '\
	        /^file:/ { \
	            file=$$0; \
	            sub(/^file:/, "", file); \
	            print file; \
	        } \
	        /^dir:/ { \
	            dir=$$0; \
	            sub(/^dir:/, "", dir); \
	            system("find ${STAGEDIR}" dir " -type f | ${SED} -E -e \"s|${STAGEDIR}||\""); \
	        }' \
	        $$f >> ${WRKDIR}/.manifest.gen.unsorted; \
	    ${RM} $$f; \
	done
	${SORT} -u ${WRKDIR}/.manifest.gen.unsorted > ${WRKDIR}/.manifest.gen.sorted
	${CAT} ${WRKDIR}/.manifest.gen.sorted >> ${WRKDIR}/.manifest.single.mktmp

	# Strip binaries and libraries
	${STRIP_CMD} \
		${STAGEDIR}${PREFIX}/bin/cargo \
		${STAGEDIR}${PREFIX}/bin/cargo-clippy \
		${STAGEDIR}${PREFIX}/bin/cargo-fmt \
		${STAGEDIR}${PREFIX}/bin/clippy-driver \
		${STAGEDIR}${PREFIX}/bin/rustc \
		${STAGEDIR}${PREFIX}/bin/rustdoc \
		${STAGEDIR}${PREFIX}/bin/rustfmt \
		${STAGEDIR}${PREFIX}/bin/rust-analyzer \
		${STAGEDIR}${PREFIX}/bin/rust-demangler \
		${STAGEDIR}${PREFIX}/libexec/cargo-credential-1password \
		${STAGEDIR}${PREFIX}/libexec/rust-analyzer-proc-macro-srv \
		${STAGEDIR}${PREFIX}/lib/*.so \
		${STAGEDIR}${PREFIX}/lib/rustlib/*/lib/*.so
