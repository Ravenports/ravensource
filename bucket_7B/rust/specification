DEF[PORTVERSION]=	1.31.0
DEF[GCCX]=		EXTRACT_INFO(CURRENT_GCC)
DEF[VENDOR_MODS]=	openssl-src
# ----------------------------------------------------------------------------

NAMEBASE=		rust
VERSION=		${PORTVERSION}
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	Systems programming language from Mozilla
HOMEPAGE=		https://www.rust-lang.org/
CONTACT=		Michael_Neumann[mneumann@ntecs.de]

DOWNLOAD_GROUPS=	main dflyboot
SITES[main]=		https://static.rust-lang.org/dist/
SITES[dflyboot]=	https://www.ntecs.de/downloads/rust/1.31.0/
DISTFILE[1]=		rustc-${PORTVERSION}-src.tar.xz:main
DISTFILE[2]=		rustc-1.31.0-x86_64-unknown-dragonfly.tar.xz:dflyboot
DISTFILE[3]=		rust-std-1.31.0-x86_64-unknown-dragonfly.tar.xz:dflyboot
DISTFILE[4]=		cargo-0.32.0-x86_64-unknown-dragonfly.tar.xz:dflyboot
DISTFILE[5]=		rustc-1.30.0-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[6]=		rust-std-1.30.0-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[7]=		cargo-0.31.0-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[8]=		rustc-1.31.0-x86_64-unknown-linux-gnu.tar.gz:main
DISTFILE[9]=		rust-std-1.31.0-x86_64-unknown-linux-gnu.tar.gz:main
DISTFILE[10]=		cargo-0.32.0-x86_64-unknown-linux-gnu.tar.gz:main
DF_INDEX=		1

SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

LICENSE=		APACHE20:single MIT:single
LICENSE_FILE=		APACHE20:{{WRKSRC}}/LICENSE-APACHE
			MIT:{{WRKSRC}}/LICENSE-MIT
LICENSE_TERMS=		single:{{WRKSRC}}/COPYRIGHT
LICENSE_SCHEME=		dual

FPC_EQUIVALENT=		lang/rust
ONLY_FOR_OPSYS=		dragonfly freebsd linux

EXTRACT_ONLY=		1
BUILD_DEPENDS=		bash:primary:standard
			cmake:single:standard
			llvm:single:standard
BUILDRUN_DEPENDS=	curl:primary:standard
			libssh2:single:standard
			libgit2:single:standard

# required for rust linking (also pulls in c++ and gcc-libs so
# USES=c++:single is redundant
EXRUN[single]=		${GCCX}:compilers:standard

USES=			gmake ssl zlib python:py27,build shebangfix
			ncurses execinfo c++:single
MUST_CONFIGURE=		yes
CONFIGURE_ARGS=		--release-channel=stable
# #			--enable-cargo-native-static
			--enable-rpath
			--enable-extended
			--enable-vendor
			--enable-locked-deps
			--disable-jemalloc
			--local-rust-root={{WRKDIR}}/bootstrap
			--llvm-root={{LOCALBASE}}
			--prefix={{PREFIX}}
			--disable-ninja
			--default-linker={{LOCALBASE}}/toolchain/${GCCX}/bin/cc
DISTNAME=		rustc-${PORTVERSION}-src
MAKE_ENV=		LD_LIBRARY_PATH={{WRKDIR}}/bootstrap/lib
			LIBGIT2_SYS_USE_PKG_CONFIG=1
			LIBSSH2_SYS_USE_PKG_CONFIG=1
			OPENSSL_NO_PKG_CONFIG=1
			RUST_BACKTRACE=1
			PROFILE=release
			OPENSSL_DIR="{{OPENSSLBASE}}"
			HOME="{{WRKDIR}}"
INSTALL_REQ_TOOLCHAIN=	yes
SHEBANG_FILES=		src/libcompiler_builtins/compiler-rt/lib/sanitizer_common/symbolizer/scripts/*.sh
			src/libcompiler_builtins/compiler-rt/lib/asan/scripts/asan_device_setup
			src/libcompiler_builtins/compiler-rt/lib/tsan/*.sh
			src/libcompiler_builtins/compiler-rt/lib/fuzzer/scripts/*.py
			src/libcompiler_builtins/compiler-rt/lib/dfsan/scripts/build-libc-list.py
			src/libcompiler_builtins/compiler-rt/lib/sanitizer_common/scripts/*.py
			src/libcompiler_builtins/compiler-rt/lib/asan/scripts/asan_symbolize.py
			src/libcore/unicode/unicode.py
			src/jemalloc/scripts/gen_travis.py

BLOCK_WATCHDOG=		yes

post-patch:
	# Use rpath suitable for libz et al.
	${REINPLACE_CMD} -e 's|@PREFIX@|${PREFIX}|g' \
		${WRKSRC}/src/bootstrap/bin/rustc.rs

	# After patching crates, we need to update their corresponding
	# `.cargo-checksum.json` to reflect the new checksums verified by Cargo
	for vendor in ${VENDOR_MODS}; do \
		dir=${WRKSRC}/src/vendor/$$vendor; \
		if ! test -d "$$dir"; then \
			continue; \
		fi; \
		cd "$$dir"; \
		for file in $$(${FIND} * -name "*.orig"); do \
			old_checksum=$$(${SHA256} -q "$$file"); \
			new_checksum=$$(${SHA256} -q "$${file%%.orig}"); \
			regex="$$regex -e s|\"$${file%%.orig}\":\"$$old_checksum\"|\"$${file%%.orig}\":\"$$new_checksum\"|"; \
		done; \
		if test "$$regex"; then \
			${REINPLACE_CMD} -E $$regex .cargo-checksum.json; \
		fi; \
	done

post-configure:
	${MKDIR} ${WRKDIR}/bootstrap
	# Extract OS-specific bootstrap components
	# then install bootstrap components

	for F in ${SRC_RUSTC} ${SRC_RUSTSTD} ${SRC_CARGO}; do\
	   ${TAR} -C ${WRKDIR} -xf ${DISTDIR}/$$F.tar.${COMPEXT}\
	     --no-same-owner --no-same-permissions;\
	   ${LOCALBASE}/bin/bash ${WRKDIR}/$$F/install.sh\
	     --prefix=${WRKDIR}/bootstrap;\
	done

post-configure-dragonfly:
	${LN} -s ${LOCALBASE}/toolchain/${GCCX}/lib/libgcc_s.so \
	${WRKDIR}/bootstrap/lib/rustlib/${SFX}/lib/libgcc_pic.so

post-configure-freebsd:
	${LN} -s ${LOCALBASE}/toolchain/${GCCX}/lib/libstdc++.so \
	${LOCALBASE}/lib/libc++.so

post-build-freebsd:
	${RM} ${LOCALBASE}/lib/libc++.so

do-build:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} \
		${PYTHON_CMD} x.py build --verbose --config ./config.toml \
		--jobs ${MAKE_JOBS_NUMBER})

do-install:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} DESTDIR=${STAGEDIR} \
		${PYTHON_CMD} x.py install --verbose --config ./config.toml \
		--jobs ${MAKE_JOBS_NUMBER})

post-install:
	${RM} ${STAGEDIR}${PREFIX}/lib/rustlib/install.log
	${RM} ${STAGEDIR}${PREFIX}/lib/rustlib/uninstall.sh
	${RM} -r ${STAGEDIR}${PREFIX}/share/doc/rust

	# Taken from FreeBSD Ports
	# In post-install, we use the manifests generated during Rust install
	# to in turn generate the PLIST. We do that because several libraries
	# have a computed filename based on the absolute path of the source
	# files. As it is user-specific, we can't know the filename in advance.
	#
	# Both rustc and Cargo components install the same README.md and
	# LICENSE files. The install process backs up the first copy to
	# install the second. Thus here, we need to remove those backups.
	# Actually we remove the entire share/doc/rust contents.
	# We also need to dedup the entries in the generated PLIST, because
	# both components manifests list them.
	#
	# We fix manpage entries in the generated manifests because Rust
	# installs them uncompressed but the Ports framework compresses them.
	for f in ${RUST_MANIFESTS}; do \
	    ${SED} -i'' -E \
		-e '/share\/doc\/rust/d' \
	        -e 's|:${STAGEDIR}|:|' \
	        -e 's|(man/man[1-9]/.*\.[0-9])|\1.gz|' \
	        ${STAGEDIR}${PREFIX}/$$f; \
	    ${AWK} '\
	        /^file:/ { \
	            file=$$0; \
	            sub(/^file:/, "", file); \
	            print file; \
	        } \
	        /^dir:/ { \
	            dir=$$0; \
	            sub(/^dir:/, "", dir); \
	            system("find ${STAGEDIR}" dir " -type f | ${SED} -E -e \"s|${STAGEDIR}||\""); \
	        }' \
	        ${STAGEDIR}${PREFIX}/$$f >> ${WRKDIR}/.manifest.gen.unsorted; \
	done
	(cd ${STAGEDIR}${PREFIX} && ${RM} ${RUST_MANIFESTS})
	${SORT} -u ${WRKDIR}/.manifest.gen.unsorted > ${WRKDIR}/.manifest.gen.sorted
	${CAT} ${WRKDIR}/.manifest.gen.sorted >> ${WRKDIR}/.manifest.single.mktmp

	# Strip binaries and libraries
	${STRIP_CMD} \
		${STAGEDIR}${PREFIX}/bin/cargo \
		${STAGEDIR}${PREFIX}/bin/cargo-clippy \
		${STAGEDIR}${PREFIX}/bin/cargo-fmt \
		${STAGEDIR}${PREFIX}/bin/clippy-driver \
		${STAGEDIR}${PREFIX}/bin/rls \
		${STAGEDIR}${PREFIX}/bin/rustc \
		${STAGEDIR}${PREFIX}/bin/rustdoc \
		${STAGEDIR}${PREFIX}/bin/rustfmt \
		${STAGEDIR}${PREFIX}/lib/*.so \
		${STAGEDIR}${PREFIX}/lib/rustlib/*/lib/*.so \
		${STAGEDIR}${PREFIX}/lib/rustlib/*/codegen-backends/*.so
