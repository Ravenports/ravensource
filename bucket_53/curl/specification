DEF[PORTVERSION]=	8.15.0
DEF[SOVERSION]=		4.8.0
DEF[DOCS]=		FAQ INSTALL KNOWN_BUGS THANKS TODO options-in-versions
# MANUAL
# ----------------------------------------------------------------------------

NAMEBASE=		curl
VERSION=		${PORTVERSION}
KEYWORDS=		ftp net www
VARIANTS=		std embed
SDESC[std]=		Tool and library for transferring data with URLs
SDESC[embed]=		Tiny curl PIC, http/s, file, scp protocol only
HOMEPAGE=		https://curl.haxx.se/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://curl.haxx.se/download/
DISTFILE[1]=		curl-${PORTVERSION}.tar.xz:main

SPKGS[std]=		set primary dev tools man examples docs
SPKGS[embed]=		set primary dev tools

OPTIONS_AVAILABLE=	EMBED
OPTIONS_STANDARD=	EMBED
VOPTS[embed]=		EMBED=ON

LICENSE=		MIT:primary
LICENSE_FILE=		MIT:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

EXRUN[dev]=		libnghttp2:dev:std
			libressl:dev:std
			zlib:dev:std
EXRUN[tools]=		primary

FPC_EQUIVALENT=		ftp/curl

USES=			cpe gmake libtool perl:build pkgconfig shebangfix zlib:build
			rootca:tools
MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--disable-werror
			--with-ca-bundle={{LOCALBASE}}/share/certs/ca-root-nss.crt
CONFIGURE_ENV=		LOCALBASE={{LOCALBASE}}
TEST_TARGET=		test
CPE_VENDOR=		haxx
CPE_PRODUCT=		libcurl
SHEBANG_FILES=		*/*.pl
SOVERSION=		${SOVERSION}

[EMBED].DESCRIPTION=			Tiny build - http/s, file, scp via libssh2
[EMBED].USES_OFF=			ssl
[EMBED].BUILD_DEPENDS_OFF=		libnghttp2:dev:std
					groff:primary:std
[EMBED].BUILDRUN_DEPENDS_OFF=		libnghttp2:primary:std
[EMBED].LDFLAGS_OFF=			-L{{OPENSSLLIB}}
[EMBED].CPPFLAGS_OFF=			-I{{OPENSSLINC}}
[EMBED].CONFIGURE_ARGS_OFF=		--with-ssl={{OPENSSLBASE}}
					--with-mbedtls=no
[EMBED].CONFIGURE_ARGS_ON=		--with-mbedtls={{LOCALBASE}}
[EMBED].BUILD_DEPENDS_ON=		libssh2:dev:embed
					mbedtls:dev:std

pre-configure:
	${REINPLACE_CMD} -e '/^SUBDIRS = / s|$$| docs scripts|; /^DIST_SUBDIRS = / s| docs scripts||; /cd docs &&/d' \
		${WRKSRC}/Makefile.in
	${REINPLACE_CMD} -e 's|\(flags_dbg_off=\)".*"|\1""|; s|\(flags_opt_off=\)".*"|\1""|' \
		${WRKSRC}/configure
	${REINPLACE_CMD} -e 's|include <gssapi.h>|include <gssapi/gssapi.h>|' \
		${WRKSRC}/lib/curl_gssapi.h ${WRKSRC}/lib/urldata.h

pre-configure-EMBED-ON:
	# copy pic library build script
	${CP} ${FILESDIR}/build_curl_pic.sh ${WRKSRC}/

pre-configure-EMBED-OFF:
	# fix libcurl.pc
	${REINPLACE_CMD} -e '/^Libs.private:/ s|:|: -L${OPENSSLLIB}|' \
		${WRKSRC}/libcurl.pc.in

post-build-EMBED-ON:
	(cd ${WRKSRC} && ${SH} ./build_curl_pic.sh)

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libcurl.so

post-install-EMBED-ON:
	${RM} -r ${STAGEDIR}${MANPREFIX}/man/man*
	${INSTALL_DATA} ${WRKSRC}/libcurl_pic.a ${STAGEDIR}${PREFIX}/lib/

post-install-EMBED-OFF:
	${MKDIR} ${STAGEDIR}${STD_DOCDIR}/libcurl \
		${STAGEDIR}${STD_EXAMPLESDIR}
	(cd ${WRKSRC}/docs/ && \
		${INSTALL_DATA} ${DOCS} *.md ${STAGEDIR}${STD_DOCDIR}/)
	(cd ${WRKSRC}/docs/libcurl/ && ${INSTALL_DATA} \
		*.m4 ${STAGEDIR}${STD_DOCDIR}/libcurl/)
	(cd ${WRKSRC}/docs/examples/ && ${INSTALL_DATA} \
		README.md Makefile.example *.c *.cpp \
		${STAGEDIR}${STD_EXAMPLESDIR}/)
