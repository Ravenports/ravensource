DEF[PORTVERSION]=	EXTRACT_INFO(RPBASE_BINUTILS)
DEF[BUREMOVE]=		coffdump dlltool dllwrap nlmconv srconv sysdump windmc windres
DEF[MBSD64_TARGET]=	EXTRACT_INFO(MIDNIGHT64_CC_TARGET)

# Version is frozen without revision because ravenadm has to pre-copy
# binutils with the other compiler packages.  Don't upgrade the
# version without a corresponding update to ravenadm.
# ----------------------------------------------------------------------------

NAMEBASE=		ravensys-binutils
VERSION=		${PORTVERSION}
KEYWORDS=		devel
VARIANTS=		std
SDESC[std]=		GNU binary tools for Ravenports toolchain
HOMEPAGE=		https://www.gnu.org/software/binutils/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		SOURCEWARE/binutils/releases
DISTFILE[1]=		binutils-${PORTVERSION}.tar.xz:main

SPKGS[std]=		single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

LICENSE=		GPLv3+:single
LICENSE_FILE=		GPLv3+:{{WRKSRC}}/COPYING3
LICENSE_TERMS=		single:{{WRKDIR}}/TERMS
LICENSE_AWK=		TERMS:"ifndef GAS"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/gas/as.h
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/binutils

BUILD_DEPENDS=		mpfr:dev:std
			gmp:dev:std

# Intentionally don't set USES=c++ for ravensys!

USES=			cpe bison gmake libtool zlib:build
CPE_VENDOR=		gnu
CPE_PRODUCT=		binutils
MUST_CONFIGURE=		gnu
INSTALL_TARGET=		install-strip
CONFIGURE_ARGS=		--disable-werror
			--disable-shared
			--with-gmp={{LOCALBASE}}
			--with-mpfr={{LOCALBASE}}
			--with-system-zlib
			--with-lib-path=/usr/lib
			--enable-targets=all
			--enable-x86-relax-relocations=no
			--enable-gprofng=no
			--enable-nls=no
PLIST_SUB=		PLUGINAPI={{PLUGINAPI}}
			LINKER={{LINKER}}
			ASSEMBLER={{ASSEMBLER}}
			GPROF={{GPROF}}
			TARGET={{CONFIGURE_TARGET}}

INFRASTRUCTURE=		yes
DISTNAME=		binutils-${PORTVERSION}
PREFIX=			{{LOCALBASE}}/toolchain

# Set INVALID_RPATH to allow this as warning during build tests
INVALID_RPATH=		yes

# Don't use enable-gold=default.
# The gold linker was developed by Google which has moved on, so
# gold is basically unmaintained now.  An increasing number of
# things are failing to build with it (lately: rust)
# Note on linux: gold fails to link port compiler

VAR_OPSYS[dragonfly]=	VAR1=/libexec/ld-elf.so.2
			VAR2=/libexec/ld-elf.so.2
			MAKEFILE_LINE=BUILD_GOLD=yes
			MAKEFILE_LINE=GOLD_CONFIG=--enable-gold
VAR_OPSYS[freebsd]=	VAR1=/libexec/ld-elf.so.1
			VAR2=/libexec/ld-elf.so.1
			MAKEFILE_LINE=BUILD_GOLD=yes
			MAKEFILE_LINE=GOLD_CONFIG=--enable-gold
VAR_OPSYS[netbsd]=	VAR1=/libexec/ld.elf-so
			VAR2=/libexec/ld.elf_so-i386
			MAKEFILE_LINE=BUILD_GOLD=yes
			MAKEFILE_LINE=GOLD_CONFIG=--enable-gold
VAR_OPSYS[darwin]=	VAR1=/libexec/ld-elf.so.1
			VAR2=/libexec/ld-elf.so.1
			MAKEFILE_LINE=LINKER="@comment "
			MAKEFILE_LINE=ASSEMBLER="@comment "
			MAKEFILE_LINE=GPROF="@comment "
VAR_OPSYS[sunos]=	VAR1=/lib/amd64/ld.so.1
			VAR2=/lib/ld.so.1
			MAKEFILE_LINE=BUILD_GOLD=yes
			MAKEFILE_LINE=GOLD_CONFIG=--enable-gold
VAR_OPSYS[linux]=	VAR1=/lib/ld64.so.1
			VAR2=/lib/ldx32.so.1
			MAKEFILE_LINE=BUILD_GOLD=yes
			MAKEFILE_LINE=GOLD_CONFIG=--enable-gold
VAR_OPSYS[openbsd]=	MAKEFILE_LINE=PLUGINAPI="@comment "
VAR_OPSYS[midnightbsd]=	VAR1=/libexec/ld-elf.so.1
			VAR2=/libexec/ld-elf.so.1
			MAKEFILE_LINE=BUILD_GOLD=yes
			MAKEFILE_LINE=GOLD_CONFIG=--enable-gold
			MAKEFILE_LINE=CONFIGURE_TARGET=${MBSD64_TARGET}

post-extract:
	# remove ability to dynamicaly link zlib
	${RM} ${LOCALBASE}/lib/libz.so

post-patch:
	${REINPLACE_CMD} \
		-e 's|@ELF64_INTERPRETER@|${VAR1}|' \
		-e 's|@ELF32_INTERPRETER@|${VAR2}|' \
	${WRKSRC}/bfd/elfxx-x86.c \
	${WRKSRC}/gold/x86_64.cc

	# turn NLS off
	${REINPLACE_CMD} -e '/INFO_DEPS =/d' \
		${WRKSRC}/ld/Makefile.in \
		${WRKSRC}/gprof/Makefile.in \
		${WRKSRC}/bfd/Makefile.in \
		${WRKSRC}/binutils/Makefile.in \
		${WRKSRC}/gas/Makefile.in \
		${WRKSRC}/libsframe/Makefile.in \
		${WRKSRC}/libctf/Makefile.in

post-install:
	${INSTALL_DATA} ${WRKSRC}/include/plugin-api.h \
		${STAGEDIR}${PREFIX}/include/
	${RM} ${STAGEDIR}${PREFIX}/include/ansidecl.h
	${SED} -i'' '/#include "ansidecl.h"/d' \
		${STAGEDIR}${PREFIX}/include/bfd.h
.for tool in ${BUREMOVE}
	${RM} ${STAGEDIR}${PREFIX}/bin/${BUTARGET}-${tool} \
		${STAGEDIR}${MANPREFIX}/man/man1/${BUTARGET}-${tool}.1 \
		${STAGEDIR}${PREFIX}/${BUTARGET}/bin/${tool}
.endfor
	# autoplist target files and ldscripts
	${FIND} ${STAGEDIR}${PREFIX}/${CONFIGURE_TARGET} ! -type d | \
		${SED} -e 's,^${STAGEDIR}${PREFIX}/,,' \
		>> ${WRKDIR}/.manifest.single.mktmp
	# remove unnecessary man pages
	${RM} ${STAGEDIR}${PREFIX}/share/man/man1/*
