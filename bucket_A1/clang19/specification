DEF[NAMEBASE]=		clang19
DEF[LLVMBASE]=		llvm19
DEF[LLVM_VERSION]=	EXTRACT_INFO(LLVM19_VERSION)
DEF[PORTREVISION]=	0
DEF[MAJORMIN]=		${LLVM_VERSION:R}
DEF[MAJOR]=		${LLVM_VERSION:R:R}
DEF[GCC_VERSION]=	EXTRACT_INFO(GCCBASE_VERSION)
DEF[GCC_LIB]=		toolchain/ravensys-gcc/{{ASLIB}}
DEF[GXX_INCLUDE]=	toolchain/ravensys-gcc/include/c++/${GCC_VERSION}
DEF[GCC_TARGET_LIB]=	toolchain/ravensys-gcc/lib/gcc/{{CONFIGURE_TARGET}}/${GCC_VERSION}
DEF[MBSD64_TARGET]=	EXTRACT_INFO(MIDNIGHT64_CC_TARGET)
# ----------------------------------------------------------------------------

NAMEBASE=		${NAMEBASE}
VERSION=		${LLVM_VERSION}
REVISION=		${PORTREVISION}
KEYWORDS=		lang
VARIANTS=		std
SDESC[std]=		C language family frontend for LLVM ${MAJORMIN}
HOMEPAGE=		http://llvm.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}/
			http://llvm.org/releases/${LLVM_VERSION}/
DISTFILE[1]=		clang-${LLVM_VERSION}.src.tar.xz:main
DISTFILE[2]=		clang-tools-extra-${LLVM_VERSION}.src.tar.xz:main
DISTFILE[3]=		cmake-${LLVM_VERSION}.src.tar.xz:main
DF_INDEX=		1 2 3

SPKGS[std]=		set compiler extra dynlibs man

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

LICENSE=		CUSTOM1:compiler
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

BUILD_DEPENDS=		${LLVMBASE}:dev:std
			${LLVMBASE}:tools:std
BUILDRUN_DEPENDS=	${LLVMBASE}:primary:std

EXRUN[compiler]=	dynlibs
EXRUN[dynlibs]=		${LLVMBASE}:primary:std
EXRUN[extra]=		${LLVMBASE}:primary:std

USES=			cmake ninja ncurses zlib execinfo
			cpe shebangfix python:build
			c++:compiler,extra
GNOME_COMPONENTS=	libxml2
CPE_VENDOR=		llvm
CPE_PRODUCT=		llvm
CMAKE_BUILD_TYPE=	Release
DISTNAME=		clang-${LLVM_VERSION}.src
SHEBANG_FILES=		utils/hmaptool/hmaptool
			tools/scan-view/bin/scan-view
			tools/clang-format/git-clang-format
			tools/clang-format/clang-format-diff.py
			tools/extra/clang-tidy/tool/clang-tidy-diff.py
			tools/extra/clang-tidy/tool/run-clang-tidy.py
			tools/extra/clang-include-fixer/find-all-symbols/tool/run-find-all-symbols.py
			tools/scan-build-py/bin/analyze-build
			tools/scan-build-py/bin/intercept-build
			tools/scan-build-py/bin/scan-build
			tools/scan-build-py/libexec/analyze-cc
			tools/scan-build-py/libexec/analyze-c++
			tools/scan-build-py/libexec/intercept-cc
			tools/scan-build-py/libexec/intercept-c++
CFLAGS=			-O2 -pipe -DNDEBUG
CXXFLAGS=		-O2 -pipe -DNDEBUG
CMAKE_ARGS=		-DLLVM_BUILD_LLVM_DYLIB=ON
			-DLLVM_LINK_LLVM_DYLIB=ON
			-DLLVM_PARALLEL_LINK_JOBS=1
			-DLLVM_PARALLEL_COMPILE_JOBS={{MAKE_JOBS_NUMBER}}
			-DLLVM_INCLUDE_TESTS:BOOL=OFF
			-DLLVM_BUILD_32_BITS:BOOL=OFF
			-DLLVM_ENABLE_RTTI=ON
# #			-DGCC_INSTALL_PREFIX={{LOCALBASE}}/toolchain/ravensys-gcc
# #			broken on clang 12.0.0 (missing completion header
			-DCLANG_ENABLE_CLANGD:BOOL=OFF
			-DPython3_EXECUTABLE={{PYTHON_CMD}}
			-DLLVM_COMMON_CMAKE_UTILS={{WRKDIR}}/cmake-${LLVM_VERSION}.src
PLIST_SUB=		LLVM_RELEASE="${LLVM_VERSION}"
			LLVM_MAJOR="${MAJOR}"
			LLVM_MAJORMIN="${MAJORMIN}"
			LLVM_SOVERSION="${LLVM_VERSION:R}"

# We should probably use SKIP_RPATH for all platforms, not just sunos
VAR_OPSYS[dragonfly]=	CMAKE_ARGS=-DLLVM_USE_LINKER=gold
			CMAKE_ARGS=-DCMAKE_INSTALL_RPATH:STRING="{{LOCALBASE}}/llvm/lib"
VAR_OPSYS[freebsd]=	CMAKE_ARGS=-DLLVM_USE_LINKER=gold
			CMAKE_ARGS=-DCMAKE_INSTALL_RPATH:STRING="{{LOCALBASE}}/llvm/lib"
VAR_OPSYS[netbsd]=	CMAKE_ARGS=-DLLVM_USE_LINKER=gold
			CMAKE_ARGS=-DCMAKE_INSTALL_RPATH:STRING="{{LOCALBASE}}/llvm/lib"
VAR_OPSYS[linux]=	CMAKE_ARGS=-DLLVM_USE_LINKER=gold
			CMAKE_ARGS=-DCMAKE_INSTALL_RPATH:STRING="{{LOCALBASE}}/llvm/lib"
VAR_OPSYS[sunos]=	CMAKE_ARGS=-DCMAKE_SKIP_RPATH:BOOL=TRUE
			LDFLAGS=-Wl,-R{{LOCALBASE}}/llvm/lib
VAR_OPSYS[midnightbsd]=	CMAKE_ARGS=-DLLVM_USE_LINKER=gold
			CMAKE_ARGS=-DCMAKE_INSTALL_RPATH:STRING="{{LOCALBASE}}/llvm/lib"
			CMAKE_ARGS=-DLLVM_DEFAULT_TARGET_TRIPLE=${MBSD64_TARGET}
			CMAKE_ARGS=-DLLVM_HOST_TRIPLE=${MBSD64_TARGET}
			MAKEFILE_LINE=CONFIGURE_TARGET=${MBSD64_TARGET}

post-extract:
	${MV} ${WRKDIR}/clang-tools-extra-${LLVM_VERSION}.src \
		${WRKDIR}/clang-tools-extra
	# hack around clang 12.0.0 bug
	${CP} -a ${WRKDIR}/clang-tools-extra ${WRKSRC}/tools/extra

pre-configure:
	${REINPLACE_CMD} -e 's,/usr/local/,${LOCALBASE}/,' \
		${WRKSRC}/lib/Driver/ToolChains/CommonArgs.cpp
	${REINPLACE_CMD} \
		-e 's|@LOCALBASE@|${LOCALBASE}|' \
		-e 's|@RAVEN_GCC@|${LOCALBASE}/${GCC_LIB}|' \
		-e 's|@RAVEN_GCC_TARGET@|${LOCALBASE}/${GCC_TARGET_LIB}|' \
		-e 's|@RAVEN_GXX_HEADERS_DIR@|${LOCALBASE}/${GXX_INCLUDE}|' \
		-e 's|@RAVEN_TRIPLE@|${CONFIGURE_TARGET}|' \
		${WRKSRC}/lib/Driver/ToolChains/DragonFly.cpp \
		${WRKSRC}/lib/Driver/ToolChains/FreeBSD.cpp \
		${WRKSRC}/lib/Driver/ToolChains/NetBSD.cpp \
		${WRKSRC}/lib/Driver/ToolChains/Gnu.cpp \
		${WRKSRC}/lib/Lex/InitHeaderSearch.cpp

pre-configure-freebsd:
	# Remove headers that conflict with /usr/include
	${REINPLACE_CMD} \
		-e '/ limits.h/d' \
		-e '/ stdalign.h/d' \
		-e '/ stdarg.h/d' \
		-e '/ stdatomic.h/d' \
		-e '/ stdbool.h/d' \
		-e '/ stddef.h/d' \
		-e '/ stdint.h/d' \
		-e '/ stdnoreturn.h/d' \
		-e '/ varargs.h/d' \
		${WRKSRC}/lib/Headers/CMakeLists.txt

pre-configure-dragonfly:
	# Remove headers that conflict with /usr/include
	${REINPLACE_CMD} \
		-e '/ limits.h/d' \
		-e '/ stdalign.h/d' \
		-e '/ stdarg.h/d' \
		-e '/ stdbool.h/d' \
		-e '/ stddef.h/d' \
		-e '/ stdint.h/d' \
		-e '/ stdnoreturn.h/d' \
		${WRKSRC}/lib/Headers/CMakeLists.txt

pre-configure-netbsd:
	# Remove headers that conflict with /usr/include
	${REINPLACE_CMD} \
		-e '/ limits.h/d' \
		-e '/ stdalign.h/d' \
		-e '/ stdarg.h/d' \
		-e '/ stdbool.h/d' \
		-e '/ stddef.h/d' \
		-e '/ stdint.h/d' \
		-e '/ stdnoreturn.h/d' \
		${WRKSRC}/lib/Headers/CMakeLists.txt

pre-configure-midnightbsd:
	# Remove headers that conflict with /usr/include
	${REINPLACE_CMD} \
		-e '/ limits.h/d' \
		-e '/ stdalign.h/d' \
		-e '/ stdarg.h/d' \
		-e '/ stdatomic.h/d' \
		-e '/ stdbool.h/d' \
		-e '/ stddef.h/d' \
		-e '/ stdint.h/d' \
		-e '/ stdnoreturn.h/d' \
		-e '/ varargs.h/d' \
		${WRKSRC}/lib/Headers/CMakeLists.txt
	# Activate __MidnightBSD__ macro
	${REINPLACE_CMD} -e '/__MidnightBSD__/ s|//|  |' \
		${WRKSRC}/lib/Basic/Targets/OSTargets.h

post-install:
	${RMDIR} ${STAGEDIR}${PREFIX}/include/clang-tidy/plugin
	${RMDIR} ${STAGEDIR}${PREFIX}/include/clang-tidy/misc/ConfusableTable
	${RMDIR} ${STAGEDIR}${PREFIX}/include/clang/Basic/Target/MSP430
	${RMDIR} ${STAGEDIR}${PREFIX}/include/clang/Basic/Target
	${INSTALL_PROGRAM} ${WRKDIR}/.build/bin/clang-tblgen \
		${STAGEDIR}${PREFIX}/bin/
.for F in c-index-test clang-${MAJOR} clang++ clang-cl clang-cpp \
	clang-check clang-doc clang-format \
	clang-extdef-mapping clang-offload-bundler \
	clang-move clang-refactor clang-rename clang-apply-replacements \
	clang-scan-deps clang-change-namespace clang-include-fixer clang-query \
	clang-reorder-fields clang-tidy find-all-symbols clang-linker-wrapper \
	clang-repl clang-offload-packager clang-pseudo amdgpu-arch nvptx-arch \
	modularize diagtool pp-trace clang-include-cleaner clang-installapi \
	clang-nvlink-wrapper
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/${F}
.endfor
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libclang.${LIBEXT}
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libclang-cpp.${LIBEXT}
